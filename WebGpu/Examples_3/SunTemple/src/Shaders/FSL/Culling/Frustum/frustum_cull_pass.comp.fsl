/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

struct IndirectDrawIndexArguments
{
    uint mIndexCount;
    uint mInstanceCount;
    uint mStartIndex;
    uint mVertexOffset;
    uint mStartInstance;
};

struct Bound
{
	DATA(float3, min, None); 
	DATA(float3, max, None); 
};

CBUFFER(uniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
    DATA(float4x4, p, None);
    DATA(float4x4, vp, None);
    DATA(float4, cameraFrustumPlanes[6], None);
	DATA(uint4, settings, None); // x: # meshes, y: frusCulling, z: occlusionCulling
};

RES(RWBuffer(float), bounds, UPDATE_FREQ_NONE, u0, binding = 1);
RES(RWBuffer(IndirectDrawIndexArguments), instanceBuffer, UPDATE_FREQ_NONE, u1, binding = 2);
RES(RWBuffer(IndirectDrawIndexArguments), indirectInstanceBuffer, UPDATE_FREQ_PER_FRAME, u2, binding = 3);

uint isInsideFrustum( float3 bCenter, float3 bExtents )
{
	for (uint i = 0; i < 6; ++i)
	{
		float4 fPlane = Get(cameraFrustumPlanes)[i];
		float3 fPlaneAbsNormal = abs(fPlane.xyz);
		float sphereProjectedRadius = dot(fPlaneAbsNormal, bExtents);

		// sphere to plane
		float sphereCenterOffset = dot(fPlane.xyz, bCenter);
		float sphereSignedDistance = sphereCenterOffset - fPlane.w;

		// behind the plane...
		if (sphereSignedDistance < -sphereProjectedRadius)
			return 0; // not visible
	}
	return 1;
}

NUM_THREADS(64, 1, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadID, SV_GroupID(uint3) groupId )
{
	INIT_MAIN;
	
	if (threadID.x < Get(settings).x)
	{
		uint bIndex = threadID.x * 6; // 6 floats, 3 per vec...
		float3 bboxMin = float3(Get(bounds)[bIndex], Get(bounds)[bIndex+1], Get(bounds)[bIndex+2]);
		float3 bboxMax = float3(Get(bounds)[bIndex+3], Get(bounds)[bIndex+4], Get(bounds)[bIndex+5]);
		
		float3 bCenter = (bboxMin + bboxMax) * 0.5f;
        float3 bExtents = bboxMax - bCenter;

		uint bIsMeshVisible = 1; // visible
		if(Get(settings).y != 0)
		{
			bIsMeshVisible =isInsideFrustum(bCenter, bExtents);
		}

		IndirectDrawIndexArguments args = Get(instanceBuffer)[threadID.x];
		args.mInstanceCount *= bIsMeshVisible;
		args.mIndexCount *= bIsMeshVisible;

		Get(indirectInstanceBuffer)[threadID.x] = args;
	}

	RETURN();
}
