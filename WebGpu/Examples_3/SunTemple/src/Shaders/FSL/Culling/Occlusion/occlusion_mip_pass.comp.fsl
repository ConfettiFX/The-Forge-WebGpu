/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

RES(RWTex2D(float), srcTex, UPDATE_FREQ_NONE, u0, binding = 1);
RES(RWTex2D(float), dstTex, UPDATE_FREQ_NONE, u1, binding = 2);

RES(SamplerState,  uSampler0, UPDATE_FREQ_NONE, s0, binding = 3);

NUM_THREADS(8, 8, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadID, SV_GroupID(uint3) groupId )
{
	INIT_MAIN;

	float2 dim = float2(GetDimensions(Get(srcTex), Get(uSampler0)));
	if(AllLessThan(threadID.xy, dim.xy))
	{
		float depth = -1.0f;
		UNROLL 
		for (int x = 0; x < 2; ++x)
		{
			UNROLL 
			for (int y = 0; y < 2; ++y)
				depth = max(depth, LoadRWTex2D(Get(srcTex), threadID.xy * 2 + uint2(x, y)).x);
		}
		Write2D(Get(srcTex), threadID.xy, LoadRWTex2D(Get(srcTex), threadID.xy).x + 0.0000001f);
		Write2D(Get(dstTex), threadID.xy, LoadRWTex2D(Get(dstTex), threadID.xy).x + depth);
	}

	RETURN();
}
