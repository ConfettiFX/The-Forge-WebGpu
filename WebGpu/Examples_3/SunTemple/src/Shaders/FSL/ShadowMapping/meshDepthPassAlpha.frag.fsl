/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

RES(SamplerState,  uSamplerSunTempleAlbedo, UPDATE_FREQ_NONE, s1, binding = 1);
RES(Tex2D(float4), diffuseMap, UPDATE_FREQ_NONE, t0, binding = 5);

STRUCT(PsIn)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
};

STRUCT(PsOut)
{
	DATA(float2, Moments, SV_Target0);
};

PsOut PS_MAIN( PsIn In )
{
	INIT_MAIN;

	float4 texColor = SampleLvlTex2D(Get(diffuseMap), Get(uSamplerSunTempleAlbedo), In.TexCoord, 0);
	clip(texColor.a < 0.5f ? -1 : 1);

	float d = In.Position.z;
	PsOut Out;
	Out.Moments.x = d;
	Out.Moments.y = d * d;
	
	// Compute partial derivative for bias to avoid self-shadows
	float dx = ddx(d);
	float dy = ddy(d);
	Out.Moments.y += 0.25 * (dx*dx + dy*dy);

	RETURN(Out);
}
